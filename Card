{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<__main__.Card at 0x7fbed00a74a8>]"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# import random\n",
    "\n",
    "class Card:\n",
    "    def __init__(self, rank, suite):\n",
    "        self.rank = rank\n",
    "        self.suite = suite\n",
    "\n",
    "    def getRank(self):\n",
    "        return self.rank\n",
    "\n",
    "    def getSuite(self):\n",
    "        return self.suite\n",
    "\n",
    "    def BJValue(self):\n",
    "        if self.rank == 'Ace':\n",
    "            x = input('Choose 1 for 1 or 2 for 10')\n",
    "            return 1\n",
    "        elif self.rank == 'Jack' or self.rank == 'Queen' or self.rank == 'King':\n",
    "            return 10\n",
    "        else:\n",
    "            return int(self.rank)\n",
    "\n",
    "    def __str__(self):\n",
    "        return (f'{self.rank} of {self.suite}')\n",
    "\n",
    "\n",
    "def shuffled_deck():\n",
    "    deck = []\n",
    "    for suite in ['Clubs', 'Diamonds', 'Hearts', 'Spades']:\n",
    "        for num in ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']:\n",
    "            deck.append([num, suite])\n",
    "    random.shuffle(deck)\n",
    "    return dict(deck)\n",
    "\n",
    "\n",
    "y =shuffled_deck()\n",
    "for x in y:\n",
    "    card_deck = []\n",
    "    card_deck.append(Card(x,y[x]))\n",
    "card_deck"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
